//// Generated by Selenium IDE
//import io.github.bonigarcia.wdm.WebDriverManager;
//import org.junit.Test;
//import org.junit.Before;
//import org.junit.After;
//import static org.junit.Assert.*;
//import static org.hamcrest.CoreMatchers.is;
//import static org.hamcrest.core.IsNot.not;
//import org.openqa.selenium.By;
//import org.openqa.selenium.WebDriver;
//import org.openqa.selenium.firefox.FirefoxDriver;
//import org.openqa.selenium.chrome.ChromeDriver;
//import org.openqa.selenium.remote.RemoteWebDriver;
//import org.openqa.selenium.remote.DesiredCapabilities;
//import org.openqa.selenium.Dimension;
//import org.openqa.selenium.WebElement;
//import org.openqa.selenium.interactions.Actions;
//import org.openqa.selenium.support.ui.ExpectedConditions;
//import org.openqa.selenium.support.ui.WebDriverWait;
//import org.openqa.selenium.JavascriptExecutor;
//import org.openqa.selenium.Alert;
//import org.openqa.selenium.Keys;
//
//import java.time.Duration;
//import java.util.*;
//import java.net.MalformedURLException;
//import java.net.URL;
//public class AddCardTest {
//  private WebDriver driver;
//  private Map<String, Object> vars;
//  JavascriptExecutor js;
//  @Before
//  public void setUp() {
//    WebDriverManager.firefoxdriver().setup();
//    driver = new FirefoxDriver();
//    driver.manage().window().setSize(new Dimension(654, 751));
//  }
//  @After
//  public void tearDown() {
//    driver.quit();
//  }
//  @Test
//  public void addCard() {
//    driver.get("http://localhost:4000/sign_in");
//    driver.manage().window().setSize(new Dimension(1920, 1048));
//    driver.findElement(By.cssSelector("button")).click();
//    WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
//    WebElement innerElement = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(".inner")));
//    innerElement.click();
//    driver.findElement(By.id("board_name")).sendKeys("First board");
//    driver.findElement(By.cssSelector("button")).click();
//    driver.findElement(By.cssSelector(".inner")).click();
//    driver.findElement(By.id("list_name")).sendKeys("First listt");
//    driver.findElement(By.cssSelector("button")).click();
//    driver.findElement(By.linkText("Add a new card...")).click();
//    driver.findElement(By.id("card_name")).sendKeys("new card");
//    driver.findElement(By.cssSelector("button")).click();
//    assertThat(driver.findElement(By.cssSelector(".card-content")).getText(), is("new card"));
//  }
//}




import io.github.bonigarcia.wdm.WebDriverManager;
import org.example.BoardsPage;
import org.example.CardPage;
import org.example.ListPage;
import org.example.SignInPage;
import org.hamcrest.CoreMatchers;
import org.junit.*;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;

import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.is;
import static org.junit.Assert.assertTrue;

public class CardPageTest {
  private WebDriver driver;
  private SignInPage signInPage;
  private BoardsPage boardsPage;
  private ListPage listPage;
  private CardPage cardPage;

  @Before
  public void setUp() {
    WebDriverManager.firefoxdriver().setup();
    driver = new FirefoxDriver();
    driver.manage().window().maximize();

    // Instantiate page objects
    signInPage = new SignInPage(driver);
    boardsPage = new BoardsPage(driver);
    listPage = new ListPage(driver);
    cardPage = new CardPage(driver);
  }

  @After
  public void tearDown() {
    if (driver != null) {
      driver.quit();
    }
  }

  @Test
  public void testAddCard() {
    signInPage.navigateTo();
    signInPage.clickLoginButton();

//    boardsPage.selectMemberOption();
    boardsPage.clickAddNewBoard();
    boardsPage.enterBoardName("First board");
    boardsPage.clickSubmitButton();

    boardsPage.clickViewContainer(); // Optional if needed to open the board view again

    listPage.enterListName("First listt");
    listPage.clickSubmitButton();

//    cardPage.clickAddCardLink();
//    cardPage.enterCardName("new card");
//    cardPage.clickSubmitButton();
//
//    assertThat(cardPage.getCardContent(), is("new card"));
    cardPage.clickAddCardLink();
    System.out.println("Clicked add card link");
    cardPage.enterCardName("new card");
    System.out.println("Entered card name");
    cardPage.clickSubmitButton();
    System.out.println("Submitted card creation");

    // Take screenshot for debugging


    // Save page source for debugging
//    try {
////      Files.writeString(Paths.get("add_card_source.html"), driver.getPageSource());
//      System.out.println("Page source saved as add_card_source.html");
//    } catch (Exception e) {
//      System.out.println("Failed to save page source: " + e.getMessage());
//    }

    // Verify the card content
    String cardContent = cardPage.getCardContent();
    System.out.println("Card content found: " + cardContent);
    assertThat(cardContent, is("new card"));
  }
  @Test
  public void newCardTest() {
    // Navigate to the sign-in page
    signInPage.navigateTo();

    // Resize window
    driver.manage().window().setSize(new Dimension(1012, 1063));

    // Login (uncomment and provide valid credentials if needed)
    // signInPage.enterEmail("valid@example.com");
    // signInPage.enterPassword("validPassword");
    signInPage.clickLoginButton();
    System.out.println("Logged in. Current URL: " + driver.getCurrentUrl());

    // Create a new board
    boardsPage.clickAddNewBoard();
    boardsPage.enterBoardName("ter");
    boardsPage.clickSubmitButton();
    System.out.println("Board created");

    // Create a new list
    boardsPage.clickInner();
    boardsPage.enterListName("aewe");
    boardsPage.clickSubmitButton();
    System.out.println("List created");

    // Create a new card
    boardsPage.clickAddNewCardLink();
    boardsPage.enterCardName("zcsaewd");
    boardsPage.clickSubmitButton();
    System.out.println("Card created");

    // Add a member to the card
    cardPage.clickCardContent();
    System.out.println("Clicked card content");



    // Verify the card content
    String cardContent = cardPage.getCardContent();
    System.out.println("Card content found: " + cardContent);
    assertThat(cardContent, is("zcsaewd"));
  }
//  public void cardComment() {
//    driver.get("http://localhost:4000/sign_in");
//    driver.manage().window().setSize(new Dimension(1920, 1048));
//
//    // Use BoardsPage methods for interacting with the UI
//    boardsPage.clickAddNewBoard();
//    boardsPage.enterBoardName("one");
//    boardsPage.clickSubmitButton();   // Clicking the button to create board
//
//    boardsPage.clickViewContainer();  // click on .inner (view-container)
//
//    boardsPage.enterListName("twot");
//    boardsPage.clickSubmitButton();   // clicking button to add list
//
//    boardsPage.clickAddNewCardLink();
//    boardsPage.enterCardName("card");
//    boardsPage.clickSubmitButton();   // click button to add card
//
//    boardsPage.clickCardContent();
//    boardsPage.enterCardComment("new comment");
//    boardsPage.clickSubmitButton();   // submit the comment
//
//    Assert.assertThat(boardsPage.getCardCommentText(), CoreMatchers.is("new comment"));
//  }
  @Test
  public void cardComment() {
    driver.get("http://localhost:4000/sign_in");
    driver.manage().window().setSize(new Dimension(1920, 1048));

    // Use BoardsPage methods for interacting with the UI
    boardsPage.clickAddNewBoard();
    boardsPage.enterBoardName("one");
    boardsPage.clickSubmitButton();   // Clicking the button to create board

    boardsPage.clickViewContainer();  // click on .inner (view-container)

    boardsPage.enterListName("twot");
    boardsPage.clickSubmitButton();   // clicking button to add list

    boardsPage.clickAddNewCardLink();
    boardsPage.enterCardName("card");
    boardsPage.clickSubmitButton();   // click button to add card

    boardsPage.clickCardContent();
    boardsPage.enterCardComment("new comment");
    boardsPage.clickSubmitButton();   // submit the comment

    Assert.assertThat(boardsPage.getCardCommentText(), CoreMatchers.is("new comment"));
  }
  @Test
  public void addCardMemberTest() {
    // Navigate to the sign-in page
    signInPage.navigateTo();

    // Resize window
    driver.manage().window().setSize(new Dimension(1012, 1063));

    // Login (uncomment and provide valid credentials if needed)
    // signInPage.enterEmail("valid@example.com");
    // signInPage.enterPassword("validPassword");
    signInPage.clickLoginButton();
    System.out.println("Logged in. Current URL: " + driver.getCurrentUrl());

    // Create a new board
    boardsPage.clickAddNewBoard();
    boardsPage.enterBoardName("ter");
    boardsPage.clickSubmitButton();
    System.out.println("Board created");

    // Create a new list
    boardsPage.clickInner();
    boardsPage.enterListName("aewe");
    boardsPage.clickSubmitButton();
    System.out.println("List created");

    // Create a new card
    boardsPage.clickAddNewCardLink();
    boardsPage.enterCardName("zcsaewd");
    boardsPage.clickSubmitButton();
    System.out.println("Card created");

    // Add a member to the card
    cardPage.clickCardContent();
    System.out.println("Clicked card content");
    cardPage.clickMemberButton();
    System.out.println("Clicked member button");
    cardPage.clickClosePopup();
    System.out.println("Closed popup");
    cardPage.clickAddNewMember();
    System.out.println("Clicked add new member");
    cardPage.enterMemberEmail("toha@gmail.com");
    System.out.println("Entered member email");
    cardPage.clickSubmitButton();
    System.out.println("Submitted member form");

    // Reopen member selection and select member
    cardPage.clickCardContent();
    System.out.println("Clicked card content again");
    cardPage.clickMemberButton();
    System.out.println("Clicked member button again");
    cardPage.selectMember();
    System.out.println("Selected member");

    // Take screenshot for debugging
    try {
      File screenshot = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);
      Files.copy(screenshot.toPath(), Paths.get("card_member_screenshot.png"));
      System.out.println("Screenshot saved as card_member_screenshot.png");
    } catch (Exception e) {
      System.out.println("Failed to save screenshot: " + e.getMessage());
    }

    // Save page source for debugging
    try {
      Files.writeString(Paths.get("card_member_source.html"), driver.getPageSource());
      System.out.println("Page source saved as card_member_source.html");
    } catch (Exception e) {
      System.out.println("Failed to save page source: " + e.getMessage());
    }

    // Verify the member avatar is present
    assertTrue("At least one member avatar should be present", cardPage.isMemberAvatarPresent());
  }
  @Test
  public void AddTagTest() {
    // Navigate to the sign-in page
    signInPage.navigateTo();

    // Resize window
    driver.manage().window().setSize(new Dimension(943, 1063));

    // Login (uncomment and provide valid credentials if needed)
    // signInPage.enterEmail("valid@email.com");
    // signInPage.enterPassword("validPassword");
    signInPage.clickLoginButton();
    System.out.println("Logged in. Current URL: " + driver.getCurrentUrl());

    // Create a new board
    boardsPage.clickAddNewBoard();
    boardsPage.enterBoardName("xzcz");
    boardsPage.clickSubmitButton();
    System.out.println("Board created");

    // Create a new list
    boardsPage.clickInner();
    boardsPage.enterListName("asdac");
    boardsPage.clickSubmitButton();
    System.out.println("List created");

    // Create a new card
    boardsPage.clickAddNewCardLink();
    boardsPage.enterCardName("fasda");
    boardsPage.clickSubmitButton();
    System.out.println("Card created");

    // Add a tag to the card
    cardPage.clickCardContent();
    System.out.println("Clicked card content. Current URL: " + driver.getCurrentUrl());
    cardPage.clickTagButton();
    System.out.println("Clicked tag button");
    cardPage.selectGreenTag();
    // Take screenshot for debugging
    try {
      File screenshot = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);
      Files.copy(screenshot.toPath(), Paths.get("tag_screenshot.png"));
      System.out.println("Screenshot saved as tag_screenshot.png");
    } catch (Exception e) {
      System.out.println("Failed to save screenshot: " + e.getMessage());
    }

    // Save page source for debugging
    try {
      Files.writeString(Paths.get("tag_source.html"), driver.getPageSource());
      System.out.println("Page source saved as tag_source.html");
    } catch (Exception e) {
      System.out.println("Failed to save page source: " + e.getMessage());
    }

    // Verify the tag exists
    assertTrue("At least one tag should be present", cardPage.isTagPresent());
  }
  @Test
  public void cardDescription() {
    // Navigate to the sign-in page
    signInPage.navigateTo();

    // Resize window
    driver.manage().window().setSize(new Dimension(1047, 1064));

    // Login (uncomment and provide valid credentials if needed)
    // signInPage.enterEmail("valid@email.com");
    // signInPage.enterPassword("validPassword");
    signInPage.clickLoginButton();
    System.out.println("Logged in. Current URL: " + driver.getCurrentUrl());

    // Create a new board
    boardsPage.clickAddNewBoard();
    boardsPage.enterBoardName("qewe");
    boardsPage.clickSubmitButton();
    System.out.println("Board created");

    // Create a new list
    boardsPage.clickInner();
    boardsPage.enterListName("sdfsdf");
    boardsPage.clickSubmitButton();
    System.out.println("List created");

    // Create a new card
    boardsPage.clickAddNewCardLink();
    boardsPage.enterCardName("btrte");
    boardsPage.clickSubmitButton();
    System.out.println("Card created");

    // Edit card description
    cardPage.clickCardContent();
    System.out.println("Clicked card content");
    cardPage.clickEditLink();
    System.out.println("Clicked edit link. Current URL: " + driver.getCurrentUrl());

    // Check if textarea is present
    System.out.println("Is description textarea present? " + cardPage.isDescriptionTextareaPresent());
    if (!cardPage.isDescriptionTextareaPresent()) {
      try {
        Files.write(Paths.get("page_source.html"), driver.getPageSource().getBytes());
        System.out.println("Page source saved as page_source.html");
      } catch (Exception e) {
        System.out.println("Failed to save page source: " + e.getMessage());
      }
    }

    // Uncomment if a description tab or modal trigger is needed
    // cardPage.clickDescriptionTab();

    cardPage.enterDescription("tr");
    System.out.println("Entered description");
    cardPage.clickSubmitButton();
    System.out.println("Submitted description");

    // Take screenshot for debugging
    try {
      File screenshot = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);
      Files.copy(screenshot.toPath(), Paths.get("error_screenshot.png"));
      System.out.println("Screenshot saved as error_screenshot.png");
    } catch (Exception e) {
      System.out.println("Failed to save screenshot: " + e.getMessage());
    }

    // Verify the card description
    Assert.assertThat(cardPage.getDescriptionText(), CoreMatchers.is("tr"));
  }
  @Test
  public void commentTimeTest() {
    // Navigate to the sign-in page
    signInPage.navigateTo();

    // Resize window
    driver.manage().window().setSize(new Dimension(1151, 1063));

    // Login (uncomment and provide valid credentials if needed)
    // signInPage.enterEmail("valid@example.com");
    // signInPage.enterPassword("validPassword");
    signInPage.clickLoginButton();
    System.out.println("Logged in. Current URL: " + driver.getCurrentUrl());

    // Create a new board
    boardsPage.clickAddNewBoard();
    boardsPage.enterBoardName("rte");
    boardsPage.clickSubmitButton();
    System.out.println("Board created");

    // Create a new list
    boardsPage.clickInner();
    boardsPage.enterListName("zzczx");
    boardsPage.clickSubmitButton();
    System.out.println("List created");

    // Create a new card
    boardsPage.clickAddNewCardLink();
    cardPage.enterCardName("bnm");
    boardsPage.clickSubmitButton();
    System.out.println("Card created");

    // Add a comment to the card
    cardPage.clickCardContent();
    System.out.println("Clicked card content");
    cardPage.enterComment("qwezczv");
    System.out.println("Entered comment");
    cardPage.clickSubmitButton();
    System.out.println("Submitted comment");

    // Take screenshot for debugging
    try {
      File screenshot = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);
      Files.copy(screenshot.toPath(), Paths.get("comment_time_screenshot.png"));
      System.out.println("Screenshot saved as comment_time_screenshot.png");
    } catch (Exception e) {
      System.out.println("Failed to save screenshot: " + e.getMessage());
    }

    // Save page source for debugging
    try {
      Files.writeString(Paths.get("comment_time_source.html"), driver.getPageSource());
      System.out.println("Page source saved as comment_time_source.html");
    } catch (Exception e) {
      System.out.println("Failed to save page source: " + e.getMessage());
    }

    // Verify the comment timestamp
    Assert.assertThat(cardPage.getCommentTimestamp(), CoreMatchers.is("6 hours ago"));
  }
}
